// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/profiles.proto

package profiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilesClient is the client API for Profiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilesClient interface {
	GetProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	GetAllProfiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Profiles_GetAllProfilesClient, error)
	CreateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	GetProfilesByIP(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (Profiles_GetProfilesByIPClient, error)
	RemoveProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
	Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*Empty, error)
	Unban(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type profilesClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesClient(cc grpc.ClientConnInterface) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) GetProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, "/profiles.profiles/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetAllProfiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Profiles_GetAllProfilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Profiles_ServiceDesc.Streams[0], "/profiles.profiles/GetAllProfiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &profilesGetAllProfilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Profiles_GetAllProfilesClient interface {
	Recv() (*ProfileReply, error)
	grpc.ClientStream
}

type profilesGetAllProfilesClient struct {
	grpc.ClientStream
}

func (x *profilesGetAllProfilesClient) Recv() (*ProfileReply, error) {
	m := new(ProfileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profilesClient) CreateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, "/profiles.profiles/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetProfilesByIP(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (Profiles_GetProfilesByIPClient, error) {
	stream, err := c.cc.NewStream(ctx, &Profiles_ServiceDesc.Streams[1], "/profiles.profiles/GetProfilesByIP", opts...)
	if err != nil {
		return nil, err
	}
	x := &profilesGetProfilesByIPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Profiles_GetProfilesByIPClient interface {
	Recv() (*ProfileReply, error)
	grpc.ClientStream
}

type profilesGetProfilesByIPClient struct {
	grpc.ClientStream
}

func (x *profilesGetProfilesByIPClient) Recv() (*ProfileReply, error) {
	m := new(ProfileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profilesClient) RemoveProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/profiles.profiles/RemoveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/profiles.profiles/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Unban(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/profiles.profiles/Unban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServer is the server API for Profiles service.
// All implementations must embed UnimplementedProfilesServer
// for forward compatibility
type ProfilesServer interface {
	GetProfile(context.Context, *IdRequest) (*ProfileReply, error)
	GetAllProfiles(*Empty, Profiles_GetAllProfilesServer) error
	CreateProfile(context.Context, *ProfileRequest) (*ProfileReply, error)
	GetProfilesByIP(*IPRequest, Profiles_GetProfilesByIPServer) error
	RemoveProfile(context.Context, *IdRequest) (*Empty, error)
	Ban(context.Context, *BanRequest) (*Empty, error)
	Unban(context.Context, *IdRequest) (*Empty, error)
	mustEmbedUnimplementedProfilesServer()
}

// UnimplementedProfilesServer must be embedded to have forward compatible implementations.
type UnimplementedProfilesServer struct {
}

func (UnimplementedProfilesServer) GetProfile(context.Context, *IdRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfilesServer) GetAllProfiles(*Empty, Profiles_GetAllProfilesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllProfiles not implemented")
}
func (UnimplementedProfilesServer) CreateProfile(context.Context, *ProfileRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedProfilesServer) GetProfilesByIP(*IPRequest, Profiles_GetProfilesByIPServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProfilesByIP not implemented")
}
func (UnimplementedProfilesServer) RemoveProfile(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProfile not implemented")
}
func (UnimplementedProfilesServer) Ban(context.Context, *BanRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (UnimplementedProfilesServer) Unban(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unban not implemented")
}
func (UnimplementedProfilesServer) mustEmbedUnimplementedProfilesServer() {}

// UnsafeProfilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilesServer will
// result in compilation errors.
type UnsafeProfilesServer interface {
	mustEmbedUnimplementedProfilesServer()
}

func RegisterProfilesServer(s grpc.ServiceRegistrar, srv ProfilesServer) {
	s.RegisterService(&Profiles_ServiceDesc, srv)
}

func _Profiles_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetProfile(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetAllProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfilesServer).GetAllProfiles(m, &profilesGetAllProfilesServer{stream})
}

type Profiles_GetAllProfilesServer interface {
	Send(*ProfileReply) error
	grpc.ServerStream
}

type profilesGetAllProfilesServer struct {
	grpc.ServerStream
}

func (x *profilesGetAllProfilesServer) Send(m *ProfileReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Profiles_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).CreateProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetProfilesByIP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfilesServer).GetProfilesByIP(m, &profilesGetProfilesByIPServer{stream})
}

type Profiles_GetProfilesByIPServer interface {
	Send(*ProfileReply) error
	grpc.ServerStream
}

type profilesGetProfilesByIPServer struct {
	grpc.ServerStream
}

func (x *profilesGetProfilesByIPServer) Send(m *ProfileReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Profiles_RemoveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).RemoveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/RemoveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).RemoveProfile(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Ban(ctx, req.(*BanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/Unban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Unban(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Profiles_ServiceDesc is the grpc.ServiceDesc for Profiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profiles.profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _Profiles_GetProfile_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _Profiles_CreateProfile_Handler,
		},
		{
			MethodName: "RemoveProfile",
			Handler:    _Profiles_RemoveProfile_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Profiles_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Profiles_Unban_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProfiles",
			Handler:       _Profiles_GetAllProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProfilesByIP",
			Handler:       _Profiles_GetProfilesByIP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/profiles.proto",
}
